**Quick resume**
Security flaw in the GNU C Library (glibc) related to POSIX(1) message queue notification via `mq_notify()`.

---

**Component affected** 
glibc, specifically the `mq_notify()` function handling sigevent structures(2) in POSIX message queues.

---

**Vulnerability type**
Use-after-free / Memory corruption / Denial of Service / Potentially code execution

---

**Versions affected**
glibc 2.32 and 2.33

---

**Cause**
Improper lifetime handling of the sigevent structure passed to `mq_notify()`, leading to use-after-free when the caller frees memory still referenced by the library.

---

**Details**
    - The mq_notify() function allows a process to be notified when a message arrives on a POSIX message queue.
    - It takes a struct sigevent(2) argument that may specify a thread to launch upon notification (via SIGEV_THREAD).
    - If the caller frees this structure (or its contents) after the call, glibc may still reference it.
    - This can lead to:
        + Use-after-free memory corruption
        + Application crash (Denial of Service)
        + Possibly arbitrary code execution, depending on memory layout and protections (e.g., ASLR, stack canaries)

---

**In laymans terms**
1 - Variable 'sev' of type struct sigevent is created.

    ```c
	struct sigevent sev;
    ```

2 - 'sev' is passed to mq_notify() to set up notification.

    ```c
	mq_notify(mqdes, &sev);
    ```

3 - If 'sev' or any of its pointers (like 'sigev_notify_attributes') are stored by reference internally by glibc and point to memory that is later freed or goes out of scope, the system might still try to use that memory - leading to bugs, use-after-free, or crashes.

---

**Definitions**
1 - POSIX: POSIX stands for Portable Operating System Interface — it's a family of standards defined by the IEEE (Institute of Electrical and Electronics Engineers) to promote compatibility between operating systems. If two operating systems are POSIX-compliant, a program written for one should compile and run on the other with little to no changes.
    POSIX message queue notification: is a feature in the POSIX standard (Portable Operating System Interface) that allows a process to be notified when new messages arrive on a message queue — a mechanism for inter-process communication (IPC)

2 - The 'struct sigevent' is a data structure defined by the POSIX standard that describes how a process should be notified of an asynchronous event — such as the completion of a timer, arrival of a message in a message queue, or completion of an asynchronous I/O operation.

```c
struct sigevent {
    int sigev_notify;                     // How notification is delivered (e.g., SIGEV_THREAD)
    int sigev_signo;                      // Signal number (if using SIGEV_SIGNAL)
    union sigval sigev_value;            // Data passed to signal or thread
    void (*sigev_notify_function)(union sigval);  // Thread callback (if SIGEV_THREAD)
    void *sigev_notify_attributes;       // Thread attributes (e.g., stack size)
};
```