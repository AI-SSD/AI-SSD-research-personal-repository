**Quick resume**:
Security flaw in the GNU C Library (glibc) related to deprecated SunRPC(1) functionality in `svcunix_create()`(2).

---

**Component affected**:
glibc, specifically the `svcunix_create()` function in the **3sunrpc** module (`svc_unix.c`).

---

**Vulnerability type**:
Stack-based buffer overflow / Memory corruption / Denial of Service / Potentially code execution

---

**Versions affected**:
glibc **through version 2.34** (patched in 2.35) ([nvd.nist.gov][1], [alas.aws.amazon.com][2])

---

**Cause**:
`svcunix_create()` copies the `path` argument onto a **fixed-size stack buffer** **without validating its length**, leading to overflow when given an overly long path string ([nvd.nist.gov][1]).

---

**Details**:

* `svcunix_create()` is part of SunRPC’s compatibility layer.
* It accepts a **filesystem path** as input.
* The function **copies this path into a local stack buffer**, but does **not check length**.
* If the path is longer than the buffer, it **overflows**, overwriting data on the stack:

  * **Corrupts return addresses or control data**
  * Results in **application crash** (Denial of Service)
  * Can allow **arbitrary code execution** if stack protections (e.g., canaries) are disabled ([debian.org][3], [nvd.nist.gov][1])

---

**In layman’s terms**:

1. `svcunix_create()` creates a temporary stack space allocated for a path string.
2. The function copies your provided path into that space **without checking if it fits**.
3. If you give it a **really long path**, it **overwrites other data on the stack**.
4. That can make the program **crash** or, in unsafe builds, **run malicious code**.

---

**Definitions**

1 - **SunRPC**: SunRPC (short for Sun Remote Procedure Call) is a protocol that allows programs to call functions on other computers (remote machines) as if they were local functions. It was originally developed by Sun Microsystems and became widely adopted in UNIX and Linux systems.

2 - `svcunix_create()`: svcunix_create() is a legacy compatibility function within the SunRPC part of glibc (specifically svc_unix.c). It’s used to set up an RPC server that communicates over UNIX domain sockets. Takes parameters such as a socket (RPC_ANYSOCK), send/receive buffer sizes, and a socket filesystem path and internally creates a UNIX socket, binds it to the specified path, and returns an RPC transport handle for that socket.

working docker image:

FROM fedora:33

# Install build tools and dependencies
RUN dnf install -y gcc make wget tar bison gawk diffutils texinfo \
    rpcgen glibc-static rpcbind patch

# Set working directory
WORKDIR /root

# Download glibc 2.32
RUN wget http://ftp.gnu.org/gnu/libc/glibc-2.32.tar.gz && \
    tar -xf glibc-2.32.tar.gz

# Build glibc 2.32 with internal SunRPC enabled
RUN mkdir /root/glibc-build && cd /root/glibc-build && \
    ../glibc-2.32/configure --prefix=/opt/glibc-2.32 \
    --enable-obsolete-rpc && \
    make -j$(nproc) && make install

# Set environment to use new glibc
ENV LD_LIBRARY_PATH=/opt/glibc-2.32/lib
ENV PATH=/opt/glibc-2.32/bin:$PATH

# Copy your vulnerable program
COPY vulnerability_example.c /root/vulnerability_example.c

